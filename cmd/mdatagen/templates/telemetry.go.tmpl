// Code generated by mdatagen. DO NOT EDIT.

package {{ .Package }}

import (
    {{- if .Telemetry.Metrics }}
    "context"
    "errors"
    {{- end }}

    {{ if hasAsync .Telemetry }}"go.opentelemetry.io/otel/attribute"{{- end }}
	"go.opentelemetry.io/otel/metric"
    "go.opentelemetry.io/otel/metric/noop"
	"go.opentelemetry.io/otel/trace"

	"github.com/oodle-ai/opentelemetry-collector/component"
    "github.com/oodle-ai/opentelemetry-collector/config/configtelemetry"
)

func Meter(settings component.TelemetrySettings) metric.Meter {
	return settings.MeterProvider.Meter("{{ .ScopeName }}")
}

func Tracer(settings component.TelemetrySettings) trace.Tracer {
	return settings.TracerProvider.Tracer("{{ .ScopeName }}")
}
{{- if .Telemetry.Metrics }}

// TelemetryBuilder provides an interface for components to report telemetry 
// as defined in metadata and user config.
type TelemetryBuilder struct {
	{{- range $name, $metric := .Telemetry.Metrics }}
	{{ $name.Render }} metric.{{ $metric.Data.Instrument }}
    {{- if $metric.Data.Async }}
    observe{{ $name.Render }} func() {{ $metric.Data.BasicType }}
    {{- end }}
	{{- end }}
    level configtelemetry.Level
    {{ if hasAsync .Telemetry }}attributeSet attribute.Set{{- end }}
}

// telemetryBuilderOption applies changes to default builder.
type telemetryBuilderOption func(*TelemetryBuilder)

// WithLevel sets the current telemetry level for the component.
func WithLevel(lvl configtelemetry.Level) telemetryBuilderOption {
    return func(builder *TelemetryBuilder) {
        builder.level = lvl
    }
}

{{- if hasAsync .Telemetry }}
// WithAttributeSet applies a set of attributes for asynchronous instruments.
func WithAttributeSet(set attribute.Set) telemetryBuilderOption {
	return func(builder *TelemetryBuilder) {
		builder.attributeSet = set
	}
}
{{- end }}

{{- range $name, $metric := .Telemetry.Metrics }}
    {{ if $metric.Data.Async -}}
// With{{ $name.Render }}Callback sets callback for observable {{ $name.Render }} metric.
func With{{ $name.Render }}Callback(cb func() {{ $metric.Data.BasicType }}) telemetryBuilderOption {
    return func(builder *TelemetryBuilder) {
        builder.observe{{ $name.Render }} = cb
    }
}
    {{- end }}
{{- end }}


// NewTelemetryBuilder provides a struct with methods to update all internal telemetry
// for a component
func NewTelemetryBuilder(settings component.TelemetrySettings, options ...telemetryBuilderOption) (*TelemetryBuilder, error) {
    builder := TelemetryBuilder{level: configtelemetry.LevelBasic}
	for _, op := range options {
		op(&builder)
	}
    var (
        err, errs error
        meter     metric.Meter
    )
    if builder.level >= configtelemetry.Level{{ casesTitle .Telemetry.Level.String }} {
        meter = Meter(settings)
    } else {
        meter = noop.Meter{}
    }
    
    {{- range $name, $metric := .Telemetry.Metrics }}
    builder.{{ $name.Render }}, err = meter.{{ $metric.Data.Instrument }}(
        "{{ $name }}",
        metric.WithDescription("{{ $metric.Description }}"),
        metric.WithUnit("{{ $metric.Unit }}"),
        {{- if eq $metric.Data.Type "Histogram" -}}
        {{ if $metric.Data.Boundaries -}}metric.WithExplicitBucketBoundaries([]float64{ {{- range $metric.Data.Boundaries }} {{.}}, {{- end }} }...),{{- end }}
        {{- end }}
        {{ if $metric.Data.Async -}}
        metric.With{{ casesTitle $metric.Data.BasicType }}Callback(func(_ context.Context, o metric.{{ casesTitle $metric.Data.BasicType }}Observer) error {
            o.Observe(builder.observe{{ $name.Render }}(), metric.WithAttributeSet(builder.attributeSet))
            return nil
        }),
        {{- end }}
    )
    errs = errors.Join(errs, err)
    {{- end }}
    return &builder, errs
}

{{- end }}
